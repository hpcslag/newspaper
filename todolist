發文城市

Semantic UI

要有 title, hash tag, 其他的...

article struct:
{
	article_id : "Mongo Hash DB Type", PERMARY KEY
	title : "Just Text Title",
	preface : "Just Text Here",
	label : [],
	hash_tag : [],
	content : "<p>This article included HTML tag language inside!</p>",
	date : new Date(),
	author : "user_id",
	featured_picture : "picture_url",
	liked : 25,
	view : 101010010
}

// 搜尋 article 各種 api 查詢
1. 多搜尋 hash_tag 列出結果，可設定每次結果數量，做分頁
limit().skip();
2. 擷取該結果數量
find().count()
3. 分頁 20 result (先以前20為主) 先不做分頁

1. 依照標題、內容搜尋
db.articles.find({ $and : [{$or:[{title:/unity/gi},{$or:[{content:/線性代數/gi}]}]}]}).limit(20) 先限制只能找到 20 筆

2. 依照作者搜尋
db.articles.find({ query : { author: "hpcslag" }});

1. 顯示該作者的文章, 要做分頁, 顯示數量限制
先顯示全部, 之後更新再改成 20 筆, 下一頁
findWithId

_id:mongojs.ObjectId('523209c4561c640000000001')


findOne article id
db.articles.find({ _id: ObjectId("57239eaba17921137858d3e2")})

----
1. 更新article資料 (注意 featured picture 要擋掉不需要更改) / if(upload) {obj with image}, {obj without image url to update}

db.articles.findAndModify({
    query: { _id: ObjectId("57239eaba17921137858d3e2") },
    update: { $set: { name:'Mac', xx: '' } },
    new: true
}, function(err, doc, lastErrorObject) {
    // doc.tag === 'maintainer'
});

----
1. 更新使用者自己的資料
db.users.findAndModify({
    query: { "userId": "hpcslag" },
    update: { $set: { name:'Mac', Introduce:'', password : 'sdlakdlas', avator:""} },
    new: true
}, function(err, doc, lastErrorObject) {
    // doc.tag === 'maintainer'
});
----
1. 新增使用者
----
db.users.insert({ userId:"hpcslag", name:"Mac Taylor", password:"xx", intro:"", avator:""});


權限:
admin, author, 每次都要從 cookie based session 截取.

作者的文章要修改，要檢查是否匹配文章作者

