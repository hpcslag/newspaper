#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('newspaper:server');
var http = require('http');

/**
 * If is command
 */
var command = process.argv.slice(2)[0];
if(!!command){
  switch(command){
    case "createUser":
      require("../command/createUser");
    break;
    case "deleteUser":
      require("../command/deleteUser");
    break;
    case "listUser":
      require("../command/listUser");
    break;
    case "init":
      require("../command/init");
    break;
    case "help":
      console.log("\n\n\n Enter Command: `nwsp createUser` or `node www createUser` \n\n 1. create user: `createUser` \n 2. listing users: `listUser` \n 3. delete user: `deleteUser` (also can delete all author).\n\n\n enter only `nwsp` will start normal server.");
      process.exit();
    break;
  }
}else{


/**
 * Get port from environment and store in Express.
 */
var configReader = require('../library/configReader');
global.webConf = configReader();

var port = normalizePort(process.env.PORT || global.webConf.port);
app.set('port', port);
console.log("The server start listen on http://localhost:" + port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

}